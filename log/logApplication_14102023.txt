[14102023130335][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023130337][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET CLAVE = :CLAVE WHERE USUARIO = :USUARIO ; Parameters: CLAVE=$2a$11$ec2HhEx0/GpHEjWcAzba0ezXwnghbRkHm7kTX5ShLfvs81e0lafna , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023130337][GymApp.Models.Log->AddToLog|Oracle Data Provider for .NET, Managed Driver][Message: ORA-00904: "CLAVE": identificador no válido; Source: Oracle Data Provider for .NET, Managed Driver; StackTrace:    en OracleInternal.ServiceObjects.OracleConnectionImpl.VerifyExecution(Int32& cursorId, Boolean bThrowArrayBindRelatedErrors, SqlStatementType sqlStatementType, Int32 arrayBindCount, OracleException& exceptionForArrayBindDML, Boolean& hasMoreRowsInDB, Boolean bFirstIterationDone)   en OracleInternal.ServiceObjects.OracleCommandImpl.ExecuteNonQuery(String commandText, OracleParameterCollection paramColl, CommandType commandType, OracleConnectionImpl connectionImpl, Int32 longFetchSize, Int64 clientInitialLOBFS, OracleDependencyImpl orclDependencyImpl, Int64[]& scnFromExecution, OracleParameterCollection& bindByPositionParamColl, Boolean& bBindParamPresent, OracleException& exceptionForArrayBindDML, OracleConnection connection, OracleLogicalTransaction& oracleLogicalTransaction, Boolean isFromEF)   en Oracle.ManagedDataAccess.Client.OracleCommand.ExecuteNonQuery()   en GymApp.Models.GlobalDB.setQuery(String vQuery, GlobalDBParamObjectList vParam) en D:\Proyectos sistemas\GYM-BRO\GymApp\Models\GlobalDB.cs:línea 63; InnerException: ]
[14102023130659][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023130701][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET PASSWORD = :PASSWORD WHERE USUARIO = :USUARIO ; Parameters: PASSWORD=$2a$11$NVvUmCHUBGFc4lVijGWhKu0vKJwKF4dJrOx1qY82itf6sc5E4.MOq , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023130701][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023130715][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023130715][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023131105][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023131105][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023131131][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023132305][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023132305][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023132446][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023132446][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023132628][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023132629][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023132702][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023132704][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET PASSWORD = :PASSWORD WHERE USUARIO = :USUARIO ; Parameters: PASSWORD=$2a$11$au262oPz59EshMd//kgnku2FQmuUxRgF75p1UkQdVTmW8TBI0bKtq , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023132704][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023133400][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023133400][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023154913][GymApp.Models.Log->AddToLog|Oracle Data Provider for .NET, Managed Driver][Message: ORA-12570: Sesión de Red: error de lectura de paquete inesperado; Source: Oracle Data Provider for .NET, Managed Driver; StackTrace:    en Oracle.ManagedDataAccess.Client.OracleException.HandleError(OracleTraceLevel level, OracleTraceTag tag, OracleTraceClassName className, OracleTraceFuncName funcName, Exception ex, OracleLogicalTransaction oracleLogicalTransaction)   en OracleInternal.TTC.TTCExecuteSql.ReceiveExecuteResponse(Accessor[]& defineAccessors, Accessor[] bindAccessors, Boolean bHasReturningParams, SQLMetaData& sqlMetaData, SqlStatementType statementType, Int64 noOfRowsFetchedLastTime, Int32 noOfRowsToFetch, Int32& noOfRowsFetched, Int64& queryId, Int32 longFetchSize, Int64 initialLOBFetchSize, Int64[] scnFromExecution, Boolean bAllInputBinds, Int32 arrayBindCount, DataUnmarshaller& dataUnmarshaller, MarshalBindParameterValueHelper& marshalBindParamsHelper, Int64[]& rowsAffectedByArrayBind, Boolean bDefineDone, Boolean& bMoreThanOneRowAffectedByDmlWithRetClause, List`1& implicitRSList, Boolean bLOBArrayFetchRequired)   en OracleInternal.ServiceObjects.OracleCommandImpl.ExecuteReader(String commandText, OracleParameterCollection paramColl, CommandType commandType, OracleConnectionImpl connectionImpl, OracleDataReaderImpl& rdrImpl, Int32 longFetchSize, Int64 clientInitialLOBFS, OracleDependencyImpl orclDependencyImpl, Int64[] scnForExecution, Int64[]& scnFromExecution, OracleParameterCollection& bindByPositionParamColl, Boolean& bBindParamPresent, Int64& internalInitialLOBFS, OracleException& exceptionForArrayBindDML, OracleConnection connection, OracleLogicalTransaction& oracleLogicalTransaction, IEnumerable`1 adrianParsedStmt, Boolean isDescribeOnly, Boolean isFromEF)   en Oracle.ManagedDataAccess.Client.OracleCommand.ExecuteReader(Boolean requery, Boolean fillRequest, CommandBehavior behavior)   en Oracle.ManagedDataAccess.Client.OracleCommand.ExecuteReader()   en GymApp.Models.AppModels.UsuarioModel.Loggeo(entUsuarios user) en D:\Proyectos sistemas\GYM-BRO\GymApp\Models\AppModels\UsuarioModel.cs:línea 37; InnerException: OracleInternal.Network.NetworkException (0x80004005): ORA-12570: Sesión de Red: error de lectura de paquete inesperado ---> System.Net.Sockets.SocketException (0x80004005): Se produjo un error durante el intento de conexión ya que la parte conectada no respondió adecuadamente tras un periodo de tiempo, o bien se produjo un error en la conexión establecida ya que el host conectado no ha podido responder   en System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)   en OracleInternal.Network.ReaderStream.Read(OraBuf OB)   en OracleInternal.Network.ReaderStream.Read(OraBuf OB)   en OracleInternal.TTC.OraBufReader.GetDataFromNetwork()   en OracleInternal.TTC.OraBufReader.Read(Boolean bIgnoreData)   en OracleInternal.TTC.MarshallingEngine.UnmarshalUB1(Boolean bIgnoreData)   en OracleInternal.TTC.TTCExecuteSql.ReceiveExecuteResponse(Accessor[]& defineAccessors, Accessor[] bindAccessors, Boolean bHasReturningParams, SQLMetaData& sqlMetaData, SqlStatementType statementType, Int64 noOfRowsFetchedLastTime, Int32 noOfRowsToFetch, Int32& noOfRowsFetched, Int64& queryId, Int32 longFetchSize, Int64 initialLOBFetchSize, Int64[] scnFromExecution, Boolean bAllInputBinds, Int32 arrayBindCount, DataUnmarshaller& dataUnmarshaller, MarshalBindParameterValueHelper& marshalBindParamsHelper, Int64[]& rowsAffectedByArrayBind, Boolean bDefineDone, Boolean& bMoreThanOneRowAffectedByDmlWithRetClause, List`1& implicitRSList, Boolean bLOBArrayFetchRequired)]
[14102023154913][GymApp.Models.Log->AddToLog|LoggeoUsuario][Error loggeando al usuario Invalid salt: salt cannot be null or emptyNombre del parámetro: salt BCrypt.Net-Next    en BCrypt.Net.BCrypt.HashPassword(String inputKey, String salt, Boolean enhancedEntropy, HashType hashType)   en BCrypt.Net.BCrypt.Verify(String text, String hash, Boolean enhancedEntropy, HashType hashType)   en GymApp.Models.AppModels.UsuarioModel.Loggeo(entUsuarios user) en D:\Proyectos sistemas\GYM-BRO\GymApp\Models\AppModels\UsuarioModel.cs:línea 54]
[14102023154934][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023154934][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023154948][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023154950][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET PASSWORD = :PASSWORD WHERE USUARIO = :USUARIO ; Parameters: PASSWORD=$2a$11$VIyI5mFYfjusbBbv.t6c0elRqnDKYx4qeVLoXoTBPVVCHYorfLKVK , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023154950][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023155121][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023155122][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET PASSWORD = :PASSWORD WHERE USUARIO = :USUARIO ; Parameters: PASSWORD=$2a$11$FqjfW020qVQPSG.dkAs8c.eRgEFnAnIFPMHCN1j43DkYq1at9VCxO , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023155122][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023155305][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155306][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155322][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023155324][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET PASSWORD = :PASSWORD WHERE USUARIO = :USUARIO ; Parameters: PASSWORD=$2a$11$VOZcRI7Qf60SsT9pnUv/uO8BThZ2rGdn5d.aEeVgzfF1elfGisTwy , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023155324][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023155439][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155439][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155456][GymApp.Models.Log->AddToLog|CargarUsuario][Generando datos del usuario [SELECT TU.USUARIO, TU.ID_EMPLEADO, TE.NOMBRE1, TE.CORREO FROM TBL_USUARIO TU INNER JOIN TBL_EMPLEADOS TE ON TE.ID_EMPLEADO = TU.ID_EMPLEADO WHERE TE.ESTADO = 'A' AND TU.USUARIO = :USUARIO ]]
[14102023155458][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_USUARIO SET PASSWORD = :PASSWORD WHERE USUARIO = :USUARIO ; Parameters: PASSWORD=$2a$11$J/1ct.oTBQks6dTxIM9xCOMNQFd8cw8O6gH0DTYcbxqePhY0B3Koq , USUARIO=ADMIN ,; DataBase: GYM; IdTransaccion: 0]
[14102023155458][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023155508][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155508][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155721][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155721][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155741][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023155741][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023162055][GymApp.Models.Log->AddToLog|CargandoDashboard][Generando listado de operaciones [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023162056][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 2),    (SELECT count(*) FROM TBL_CONTROL_PAGOS WHERE ID_ESTADO_PAGO = 1),    (SELECT count(*) FROM TBL_CLIENTE)FROM DUAL]]
[14102023162104][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT * FROM TBL_CLIENTE ORDER BY 1]]
[14102023162140][GymApp.Models.Log->AddToLog][Ejecucion Command ::: Type: Text; Text: UPDATE TBL_CLIENTE SET ESTADO = :ESTADO WHERE ID_CLIENTE = :ID_CLIENTE; Parameters: ESTADO=I , ID_CLIENTE=CB- ,; DataBase: GYM; IdTransaccion: 0]
[14102023162140][GymApp.Models.Log->AddToLog|getQuery.Resultado][Resultado: 1]
[14102023162145][GymApp.Models.Log->AddToLog|CargarClientes][Generando listado de clientes [SELECT * FROM TBL_CLIENTE ORDER BY 1]]
